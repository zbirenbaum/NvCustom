--> {"method": "initialize", "jsonrpc": "2.0", "id": 1, "params": {"capabilities": {}}}
<-- {"jsonrpc":"2.0","id":1,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2}}}}
--> {"method": "setEditorInfo", "jsonrpc": "2.0", "id": 2, "params": {"editorPluginInfo": {"version": "1.1.0", "name": "copilot.vim"}, "editorInfo": {"version": "0.7.0-dev+1337-g72652cbc4-dirty", "name": "Neovim"}}}
<-- {"jsonrpc":"2.0","id":2,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 3, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 0, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":3,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 4, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 0, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":4,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 5, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "l\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 1, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":5,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 6, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "lo\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 2, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":6,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 7, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 5, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":7,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 8, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local \n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 6, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":8,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 9, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local l\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 7, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":9,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 10, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local lo\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 8, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":10,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 11, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 9, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":11,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 12, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log \n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 10, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 13, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log =\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 11, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","method":"statusNotification","params":{"status":"InProgress","message":""}}
<-- {"jsonrpc":"2.0","method":"statusNotification","params":{"status":"InProgress","message":""}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:10.885Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:10.885Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 14, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = \n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 12, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","method":"statusNotification","params":{"status":"InProgress","message":""}}
<-- {"jsonrpc":"2.0","id":13,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":13,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":13,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:11.035Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:11.035Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 15, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = re\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 14, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":14,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":14,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":14,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":14,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:11.313Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:11.313Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 16, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = requ\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 16, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":15,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":15,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":15,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":15,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:11.571Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:11.571Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 17, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = requi\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 17, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":16,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":16,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":16,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":16,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 18, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = requir\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 18, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":17,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":17,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":17,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":17,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":17,"result":{"completions":[]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 19, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 19, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:11.740Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:11.740Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
<-- {"jsonrpc":"2.0","id":18,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":18,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":18,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":18,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:11.819Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:11.819Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:11.949Z] request.response: [https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex/completions] took 130 ms","metadataStr":"[INFO] [default] [2022-03-28T21:56:11.949Z]","extra":["request.response: [https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex/completions] took 130 ms"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [streamChoices] [2022-03-28T21:56:11.951Z] solution 0 returned. finish reason: [\"stop\"] finishOffset: [undefined] completionId: [{cmpl-4qrdLNzzgsk7kO39XhUyqQwnvn5Bu}] created: [{1648504571}]","metadataStr":"[INFO] [streamChoices] [2022-03-28T21:56:11.951Z]","extra":["solution 0 returned. finish reason: [\"stop\"] finishOffset: [undefined] completionId: [{cmpl-4qrdLNzzgsk7kO39XhUyqQwnvn5Bu}] created: [{1648504571}]"]}}
<-- {"jsonrpc":"2.0","id":19,"result":{"completions":[{"uuid":"15a17bce-4aa5-444a-975e-d464b657b9b4","text":"local log = require 'log'","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":19}},"displayText":" 'log'","position":{"line":0,"character":19}}]}}
<-- {"jsonrpc":"2.0","id":19,"result":{"completions":[{"uuid":"15a17bce-4aa5-444a-975e-d464b657b9b4","text":"local log = require 'log'","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":19}},"displayText":" 'log'","position":{"line":0,"character":19}}]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 20, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require()\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 20, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","method":"statusNotification","params":{"status":"InProgress","message":""}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:12.088Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:12.088Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:12.206Z] request.response: [https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex/completions] took 118 ms","metadataStr":"[INFO] [default] [2022-03-28T21:56:12.206Z]","extra":["request.response: [https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex/completions] took 118 ms"]}}
<-- {"jsonrpc":"2.0","id":20,"result":{"completions":[{"uuid":"d0f34af5-5cb0-4ece-b340-6918431306cb","text":"local log = require(\"log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":21}},"displayText":"\"log\")","position":{"line":0,"character":20}}]}}
<-- {"jsonrpc":"2.0","id":20,"result":{"completions":[{"uuid":"d0f34af5-5cb0-4ece-b340-6918431306cb","text":"local log = require(\"log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":21}},"displayText":"\"log\")","position":{"line":0,"character":20}}]}}
<-- {"jsonrpc":"2.0","id":20,"result":{"completions":[{"uuid":"d0f34af5-5cb0-4ece-b340-6918431306cb","text":"local log = require(\"log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":21}},"displayText":"\"log\")","position":{"line":0,"character":20}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 21, "params": {"uuid": "d0f34af5-5cb0-4ece-b340-6918431306cb"}}
<-- {"jsonrpc":"2.0","id":21,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 22, "params": {"uuids": ["d0f34af5-5cb0-4ece-b340-6918431306cb"]}}
<-- {"jsonrpc":"2.0","id":22,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 23, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 21, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":23,"result":{"completions":[{"uuid":"35ff1076-e68d-4615-9b8e-134bd6ba0457","text":"local log = require(\"log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":23}},"displayText":"log\")","position":{"line":0,"character":21}}]}}
<-- {"jsonrpc":"2.0","id":23,"result":{"completions":[{"uuid":"35ff1076-e68d-4615-9b8e-134bd6ba0457","text":"local log = require(\"log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":23}},"displayText":"log\")","position":{"line":0,"character":21}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 24, "params": {"uuid": "35ff1076-e68d-4615-9b8e-134bd6ba0457"}}
<-- {"jsonrpc":"2.0","id":24,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 25, "params": {"uuids": ["35ff1076-e68d-4615-9b8e-134bd6ba0457"]}}
<-- {"jsonrpc":"2.0","id":25,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 26, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 24, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","method":"statusNotification","params":{"status":"InProgress","message":""}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:20.684Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:20.684Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 27, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim.\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 25, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":26,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":26,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":26,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","id":26,"result":{"completions":[]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:20.849Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:56:20.849Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:56:20.981Z] request.response: [https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex/completions] took 132 ms","metadataStr":"[INFO] [default] [2022-03-28T21:56:20.981Z]","extra":["request.response: [https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex/completions] took 132 ms"]}}
<-- {"jsonrpc":"2.0","id":27,"result":{"completions":[{"uuid":"dc00a913-5def-4729-bbeb-287805e03b9e","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":27}},"displayText":"lsp.log\")","position":{"line":0,"character":25}}]}}
<-- {"jsonrpc":"2.0","id":27,"result":{"completions":[{"uuid":"dc00a913-5def-4729-bbeb-287805e03b9e","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":27}},"displayText":"lsp.log\")","position":{"line":0,"character":25}}]}}
<-- {"jsonrpc":"2.0","id":27,"result":{"completions":[{"uuid":"dc00a913-5def-4729-bbeb-287805e03b9e","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":27}},"displayText":"lsp.log\")","position":{"line":0,"character":25}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 28, "params": {"uuid": "dc00a913-5def-4729-bbeb-287805e03b9e"}}
<-- {"jsonrpc":"2.0","id":28,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 29, "params": {"uuids": ["dc00a913-5def-4729-bbeb-287805e03b9e"]}}
<-- {"jsonrpc":"2.0","id":29,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 30, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim.l\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 26, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":30,"result":{"completions":[{"uuid":"2ce24392-9106-4162-bfea-48f9f8b7c143","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":28}},"displayText":"sp.log\")","position":{"line":0,"character":26}}]}}
<-- {"jsonrpc":"2.0","id":30,"result":{"completions":[{"uuid":"2ce24392-9106-4162-bfea-48f9f8b7c143","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":28}},"displayText":"sp.log\")","position":{"line":0,"character":26}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 31, "params": {"uuid": "2ce24392-9106-4162-bfea-48f9f8b7c143"}}
<-- {"jsonrpc":"2.0","id":31,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 32, "params": {"uuids": ["2ce24392-9106-4162-bfea-48f9f8b7c143"]}}
<-- {"jsonrpc":"2.0","id":32,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 33, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim.ls\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 27, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":33,"result":{"completions":[{"uuid":"c435b587-3ec0-4468-95cb-d2116201043b","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":29}},"displayText":"p.log\")","position":{"line":0,"character":27}}]}}
<-- {"jsonrpc":"2.0","id":33,"result":{"completions":[{"uuid":"c435b587-3ec0-4468-95cb-d2116201043b","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":29}},"displayText":"p.log\")","position":{"line":0,"character":27}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 34, "params": {"uuid": "c435b587-3ec0-4468-95cb-d2116201043b"}}
<-- {"jsonrpc":"2.0","id":34,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 35, "params": {"uuids": ["c435b587-3ec0-4468-95cb-d2116201043b"]}}
<-- {"jsonrpc":"2.0","id":35,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 36, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim.lsp\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 28, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":36,"result":{"completions":[{"uuid":"74cf0671-338d-4548-bcc5-60ec6d25c14f","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":30}},"displayText":".log\")","position":{"line":0,"character":28}}]}}
<-- {"jsonrpc":"2.0","id":36,"result":{"completions":[{"uuid":"74cf0671-338d-4548-bcc5-60ec6d25c14f","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":30}},"displayText":".log\")","position":{"line":0,"character":28}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 37, "params": {"uuid": "74cf0671-338d-4548-bcc5-60ec6d25c14f"}}
<-- {"jsonrpc":"2.0","id":37,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 38, "params": {"uuids": ["74cf0671-338d-4548-bcc5-60ec6d25c14f"]}}
<-- {"jsonrpc":"2.0","id":38,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 39, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim.lsp.\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 29, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":39,"result":{"completions":[{"uuid":"b517cdd0-df73-4156-a37d-87047ba3a9bc","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":31}},"displayText":"log\")","position":{"line":0,"character":29}}]}}
<-- {"jsonrpc":"2.0","id":39,"result":{"completions":[{"uuid":"b517cdd0-df73-4156-a37d-87047ba3a9bc","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":31}},"displayText":"log\")","position":{"line":0,"character":29}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 40, "params": {"uuid": "b517cdd0-df73-4156-a37d-87047ba3a9bc"}}
<-- {"jsonrpc":"2.0","id":40,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 41, "params": {"uuids": ["b517cdd0-df73-4156-a37d-87047ba3a9bc"]}}
<-- {"jsonrpc":"2.0","id":41,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 42, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim.lsp.l\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 30, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":42,"result":{"completions":[{"uuid":"c4c19b90-702e-4492-bc37-c485cef46975","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":32}},"displayText":"og\")","position":{"line":0,"character":30}}]}}
<-- {"jsonrpc":"2.0","id":42,"result":{"completions":[{"uuid":"c4c19b90-702e-4492-bc37-c485cef46975","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":32}},"displayText":"og\")","position":{"line":0,"character":30}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 43, "params": {"uuid": "c4c19b90-702e-4492-bc37-c485cef46975"}}
<-- {"jsonrpc":"2.0","id":43,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 44, "params": {"uuids": ["c4c19b90-702e-4492-bc37-c485cef46975"]}}
<-- {"jsonrpc":"2.0","id":44,"result":"OK"}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 45, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim.lsp.log\")\n\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 32, "line": 0}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","id":45,"result":{"completions":[{"uuid":"f2f43cbf-b13c-41b3-9786-82d0e50e769c","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":34}},"displayText":"\")","position":{"line":0,"character":32}}]}}
<-- {"jsonrpc":"2.0","id":45,"result":{"completions":[{"uuid":"f2f43cbf-b13c-41b3-9786-82d0e50e769c","text":"local log = require(\"vim.lsp.log\")","range":{"start":{"line":0,"character":0},"end":{"line":0,"character":34}},"displayText":"\")","position":{"line":0,"character":32}}]}}
--> {"method": "notifyShown", "jsonrpc": "2.0", "id": 46, "params": {"uuid": "f2f43cbf-b13c-41b3-9786-82d0e50e769c"}}
<-- {"jsonrpc":"2.0","id":46,"result":"OK"}
--> {"method": "notifyRejected", "jsonrpc": "2.0", "id": 47, "params": {"uuids": ["f2f43cbf-b13c-41b3-9786-82d0e50e769c"]}}
<-- {"jsonrpc":"2.0","id":47,"result":"OK"}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:42.241Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:42.241Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:50.458Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:50.458Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:51.210Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:51.210Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:51.296Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:51.296Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:51.398Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:51.398Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:51.698Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:51.698Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:51.976Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:51.976Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:52.167Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:52.167Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":2,"message":"[WARN] [post-insertion] [2022-03-28T21:56:52.348Z] Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua","metadataStr":"[WARN] [post-insertion] [2022-03-28T21:56:52.348Z]","extra":["Could not get document for /home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"]}}
--> {"method": "getCompletions", "jsonrpc": "2.0", "id": 48, "params": {"options": {}, "doc": {"relativePath": "msgparse.lua", "source": "local log = require(\"vim.lsp.log\")\n\nlocal function format_message_with_content_length(encoded_message)\n  return table.concat {\n    'Content-Length: '; tostring(#encoded_message); '\\r\\n\\r\\n';\n    encoded_message;\n  }\nend\nlocal function parse_headers(header)\n  if type(header) ~= 'string' then\n    return nil\n  end\n  local headers = {}\n  for line in vim.gsplit(header, '\\r\\n', true) do\n    if line == '' then\n      break\n    end\n    local key, value = line:match(\"^%s*(%S+)%s*:%s*(.+)%s*$\")\n    if key then\n      key = key:lower():gsub('%-', '_')\n      headers[key] = value\n    else\n      local _ = log.error() and log.error(\"invalid header line %q\", line)\n      error(string.format(\"invalid header line %q\", line))\n    end\n  end\n  headers.content_length = tonumber(headers.content_length)\n      or error(string.format(\"Content-Length not found in headers. %q\", header))\n  return headers\nend\n\n", "languageId": "lua", "insertSpaces": true, "tabSize": 3, "indentSize": 3, "position": {"character": 0, "line": 30}, "path": "/home/zach/.config/nvimconfigs/custom/utils/copilot/msgparse.lua"}}}
<-- {"jsonrpc":"2.0","method":"statusNotification","params":{"status":"InProgress","message":""}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:57:45.137Z] [fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex","metadataStr":"[INFO] [default] [2022-03-28T21:57:45.137Z]","extra":["[fetchCompletions] engine https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex"]}}
<-- {"jsonrpc":"2.0","method":"LogMessage","params":{"level":1,"message":"[INFO] [default] [2022-03-28T21:57:45.674Z] request.response: [https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex/completions] took 536 ms","metadataStr":"[INFO] [default] [2022-03-28T21:57:45.674Z]","extra":["request.response: [https://copilot-proxy.githubusercontent.com/v1/engines/copilot-codex/completions] took 536 ms"]}}
<-- {"jsonrpc":"2.0","id":48,"result":{"completions":[{"uuid":"cec8db9c-5418-4e5f-a3bd-92989da25ac6","text":"local function parse_body(body, content_length)\n  if type(body) ~= 'string' then\n    return nil\n  end\n  if #body ~= content_length then\n    error(string.format(\"Content-Length mismatch. Expected %d, got %d\", content_length, #body))\n  end\n  return body\nend","range":{"start":{"line":30,"character":0},"end":{"line":30,"character":0}},"displayText":"local function parse_body(body, content_length)\n  if type(body) ~= 'string' then\n    return nil\n  end\n  if #body ~= content_length then\n    error(string.format(\"Content-Length mismatch. Expected %d, got %d\", content_length, #body))\n  end\n  return body\nend","position":{"line":30,"character":0}}]}}
<-- {"jsonrpc":"2.0","id":48,"result":{"completions":[{"uuid":"cec8db9c-5418-4e5f-a3bd-92989da25ac6","text":"local function parse_body(body, content_length)\n  if type(body) ~= 'string' then\n    return nil\n  end\n  if #body ~= content_length then\n    error(string.format(\"Content-Length mismatch. Expected %d, got %d\", content_length, #body))\n  end\n  return body\nend","range":{"start":{"line":30,"character":0},"end":{"line":30,"character":0}},"displayText":"local function parse_body(body, content_length)\n  if type(body) ~= 'string' then\n    return nil\n  end\n  if #body ~= content_length then\n    error(string.format(\"Content-Length mismatch. Expected %d, got %d\", content_length, #body))\n  end\n  return body\nend","position":{"line":30,"character":0}}]}}
<-- {"jsonrpc":"2.0","id":48,"result":{"completions":[{"uuid":"cec8db9c-5418-4e5f-a3bd-92989da25ac6","text":"local function parse_body(body, content_length)\n  if type(body) ~= 'string' then\n    return nil\n  end\n  if #body ~= content_length then\n    error(string.format(\"Content-Length mismatch. Expected %d, got %d\", content_length, #body))\n  end\n  return body\nend","range":{"start":{"line":30,"character":0},"end":{"line":30,"character":0}},"displayText":"local function parse_body(body, content_length)\n  if type(body) ~= 'string' then\n    return nil\n  end\n  if #body ~= content_length then\n    error(string.format(\"Content-Length mismatch. Expected %d, got %d\", content_length, #body))\n  end\n  return body\nend","position":{"line":30,"character":0}}]}}
agent exited with status 143
agent exited with status 143
